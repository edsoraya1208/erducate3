rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Safe lecturer check with proper null handling
    function isLecturer() {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.keys().hasAll(['role']) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'lecturer';
    }
    
    // Safe student check with proper null handling
    function isStudent() {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.keys().hasAll(['role']) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'student';
    }
    
    // Check if user owns a specific class
    function ownsClass(classId) {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/classes/$(classId)) &&
             get(/databases/$(database)/documents/classes/$(classId)).data.instructorId == request.auth.uid;
    }
    
    // Users collection rules
    match /users/{userId} {
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && isOwner(userId);
      allow read: if isAuthenticated() && isOwner(userId);
      allow delete: if false;
    }

    // Classes collection rules
    match /classes/{classId} {
      allow create: if isLecturer();
      allow read: if isAuthenticated() && (
        (isLecturer() && resource.data.instructorId == request.auth.uid) ||
        isStudent()
      );
      allow update, delete: if isAuthenticated() && 
                              resource.data.instructorId == request.auth.uid;
    }
    
    // Student-Class enrollment collection
    match /studentClasses/{enrollmentId} {
      allow create: if isAuthenticated() && 
                       isStudent() && 
                       request.resource.data.studentId == request.auth.uid;
      
      allow read: if isAuthenticated() && (
        (isStudent() && resource.data.studentId == request.auth.uid) ||
        (isLecturer() && ownsClass(resource.data.classId))
      );
      
      allow update: if isAuthenticated() && 
                       isLecturer() && 
                       ownsClass(resource.data.classId);
      
      allow delete: if isAuthenticated() && 
                       isStudent() && 
                       resource.data.studentId == request.auth.uid;
    }
    
    // FIXED: Exercise rules that work with your data structure
    match /classes/{classId}/exercises/{exerciseId} {
      // Lecturers can do everything with their class exercises
      allow create, update, delete: if isAuthenticated() && ownsClass(classId);
      
      // Students can read exercises if they're students (enrollment check in app)
      // Lecturers can read their own class exercises
      allow read: if isAuthenticated() && (
        ownsClass(classId) ||
        isStudent()
      );
    }
    
    // FIXED: Student progress tracking with proper rules
    match /studentProgress/{progressId} {
      // Students can create/read/update their own progress
      allow create, read, update: if isAuthenticated() && 
                                     isStudent() && 
                                     (request.resource.data.studentId == request.auth.uid ||
                                      resource.data.studentId == request.auth.uid);
      
      // Lecturers can read student progress for their classes
      allow read: if isAuthenticated() && 
                     isLecturer() && 
                     exists(/databases/$(database)/documents/classes/$(resource.data.classId)) &&
                     get(/databases/$(database)/documents/classes/$(resource.data.classId)).data.instructorId == request.auth.uid;
      
      allow delete: if false;
    }
    
    // Deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}