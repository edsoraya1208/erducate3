rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Safe lecturer check with proper null handling
    function isLecturer() {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.keys().hasAll(['role']) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'lecturer';
    }
    
    // Safe student check with proper null handling
    function isStudent() {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.keys().hasAll(['role']) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'student';
    }
    
    // Check if user owns a specific class
    function ownsClass(classId) {
      return isAuthenticated() &&
             exists(/databases/$(database)/documents/classes/$(classId)) &&
             get(/databases/$(database)/documents/classes/$(classId)).data.instructorId == request.auth.uid;
    }
    
    // Users collection rules
    match /users/{userId} {
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && isOwner(userId);
      allow read: if isAuthenticated();
      allow delete: if false;
    }

    // Classes collection rules
    match /classes/{classId} {
      allow create: if isLecturer();
      allow read: if isAuthenticated() && (
        (isLecturer() && resource.data.instructorId == request.auth.uid) ||
        isStudent()
      );
      allow update, delete: if isAuthenticated() && 
                              resource.data.instructorId == request.auth.uid;
    }
    
    // ✅✅✅ NEW: Class Metrics Collection (for capacity tracking) ✅✅✅
    match /classMetrics/{classId} {
      // Anyone authenticated can read metrics (only contains count)
      allow read: if isAuthenticated();
      
      // Only system (via transactions) and lecturers can write
      allow create, update: if isAuthenticated() && (
        isLecturer() ||
        isStudent()  // Students update via transaction during join
      );
      
      allow delete: if isLecturer() && ownsClass(classId);
    }
    
    // ✅ REVERTED: Student-Class enrollment collection (back to secure)
    match /studentClasses/{enrollmentId} {
      allow create: if isAuthenticated() && 
                       isStudent() && 
                       request.resource.data.studentId == request.auth.uid;
      
      // FIXED: Only read own enrollments + lecturers can read their class enrollments
      allow read: if isAuthenticated() && (
        (isStudent() && resource.data.studentId == request.auth.uid) ||
        (isLecturer() && ownsClass(resource.data.classId))
      );
      
      allow update: if isAuthenticated() && 
                       isLecturer() && 
                       ownsClass(resource.data.classId);
      
      allow delete: if isAuthenticated() && (
        (isStudent() && resource.data.studentId == request.auth.uid) ||
        (isLecturer() && ownsClass(resource.data.classId))
      );
    }
    
    // Exercise rules
    match /classes/{classId}/exercises/{exerciseId} {
      allow create, update, delete: if isAuthenticated() && ownsClass(classId);
      allow read: if isAuthenticated() && (
        ownsClass(classId) ||
        isStudent()
      );
    }
    
    // Student progress
    match /studentProgress/{progressId} {
      allow create: if isAuthenticated() && 
                      isStudent() && 
                      request.resource.data.studentId == request.auth.uid;
      
      allow read, update: if isAuthenticated() && 
                            isStudent() && 
                            resource.data.studentId == request.auth.uid;
      
      allow read: if isAuthenticated() && 
                    isLecturer() && 
                    exists(/databases/$(database)/documents/classes/$(resource.data.classId)) &&
                    get(/databases/$(database)/documents/classes/$(resource.data.classId)).data.instructorId == request.auth.uid;
      
      allow delete: if isAuthenticated() && 
                      isLecturer() && 
                      exists(/databases/$(database)/documents/classes/$(resource.data.classId)) &&
                      get(/databases/$(database)/documents/classes/$(resource.data.classId)).data.instructorId == request.auth.uid;
    }
    
    // Submissions collection
    match /submissions/{submissionId} {
      allow create, update: if isAuthenticated() && 
                              isStudent() && 
                              request.resource.data.studentId == request.auth.uid;
      
      allow read: if isAuthenticated() && 
                    isStudent() && 
                    resource.data.studentId == request.auth.uid;
      
      allow read: if isAuthenticated() && 
                    isLecturer() && 
                    exists(/databases/$(database)/documents/classes/$(resource.data.classId)) &&
                    get(/databases/$(database)/documents/classes/$(resource.data.classId)).data.instructorId == request.auth.uid;
      
      allow update: if isAuthenticated() && 
                      isLecturer() && 
                      exists(/databases/$(database)/documents/classes/$(resource.data.classId)) &&
                      get(/databases/$(database)/documents/classes/$(resource.data.classId)).data.instructorId == request.auth.uid;
      
      allow delete: if isAuthenticated() && 
                      isLecturer() && 
                      exists(/databases/$(database)/documents/classes/$(resource.data.classId)) &&
                      get(/databases/$(database)/documents/classes/$(resource.data.classId)).data.instructorId == request.auth.uid;
    }
    
    // Deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}